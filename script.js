let data = []; // D·ªØ li·ªáu g·ªëc

const selectQuocGia = document.getElementById("filterQuocGia");
const selectSoNgay = document.getElementById("filterSoNgay");
const selectDungLuong = document.getElementById("filterDungLuong");
const ketquaDiv = document.getElementById("ketqua");

// Th√™m div ch·ª©a n√∫t copy (ph·∫£i c√≥ trong HTML ho·∫∑c t·∫°o ƒë·ªông)
const copyBtnContainerId = "copy-btn-container";
if (!document.getElementById(copyBtnContainerId)) {
  const divCopyBtn = document.createElement("div");
  divCopyBtn.id = copyBtnContainerId;
  divCopyBtn.style.margin = "10px 0";
  ketquaDiv.parentNode.insertBefore(divCopyBtn, ketquaDiv);
}

const copyBtnContainer = document.getElementById(copyBtnContainerId);

const columns = [
  { key: "checkbox", label: "", selectable: false },           // 0 checkbox c·ªôt
  { key: "stt", label: "STT", selectable: false },             // 1 STT
  { key: "M√£ s·∫£n ph·∫©m", label: "M√£ SP", selectable: true },          // 2
  { key: "G√≥i c∆∞·ªõc", label: "G√≥i c∆∞·ªõc", selectable: true },    // 3
  { key: "Qu·ªëc gia", label: "Qu·ªëc gia", selectable: true },    // 4 ƒê·ªïi th√†nh "Qu·ªëc gia"
  { key: "S·ªë ng√†y", label: "S·ªë ng√†y", selectable: true },      // 5
  { key: "Dung l∆∞·ª£ng", label: "Dung l∆∞·ª£ng", selectable: true },// 6
  { key: "Lo·∫°i g√≥i c∆∞·ªõc", label: "Lo·∫°i g√≥i c∆∞·ªõc", selectable: true }, // 7
  { key: " Gi√° b√°n l·∫ª ESIMZY ", label: "Gi√° b√°n l·∫ª ESIMZY", selectable: true }, // 8
  { key: "Gi√° KM\nsau chi·∫øt kh·∫•u ESIMZY", label: "Gi√° KM", selectable: true },                   // 9
  { key: " Gi√° b√°n l·∫ª eSIM Nh·∫≠t (Y√™n) ", label: "Gi√° b√°n l·∫ª eSIM Nh·∫≠t (Y√™n)", selectable: true }, // 10
  { key: "Region", label: "Region", selectable: true },                   // 11
  { key: "Type", label: "Type", selectable: true },                       // 12
  { key: "Nh√† M·∫°ng", label: "Nh√† m·∫°ng", selectable: true },               // 13
  { key: "Ghi ch√∫", label: "Ghi ch√∫", selectable: true }                   // 14
];

// L·∫•y gi√° tr·ªã duy nh·∫•t cho filter
function getUniqueList(field, isSoNgay = false, isDungLuong = false) {
  const set = new Set();
  data.forEach(item => {
    let val = item[field];
    if (val) {
      val = val.toString().trim();
      if (isDungLuong) {
        const match = val.match(/(\d+)\s*GB/i);
        if (match) set.add(match[1]);
      } else {
        set.add(val);
      }
    }
  });
  let arr = Array.from(set);
  if (isSoNgay) {
    arr.sort((a,b) => (parseInt(a.match(/\d+/)) || 0) - (parseInt(b.match(/\d+/)) || 0));
  } else {
    arr.sort();
  }
  return arr;
}

// T·∫°o options cho c√°c filter select
function populateFilterOptions() {
  // X√≥a option hi·ªán c√≥ tr∆∞·ªõc khi th√™m m·ªõi
  selectQuocGia.innerHTML = `<option value="">--Ch·ªçn Qu·ªëc gia--</option>`;
  selectSoNgay.innerHTML = `<option value="">--Ch·ªçn S·ªë ng√†y--</option>`;
  selectDungLuong.innerHTML = `<option value="">--Ch·ªçn Dung l∆∞·ª£ng--</option>`;

  const quocGiaList = getUniqueList("Qu·ªëc gia");
  quocGiaList.forEach(qg => {
    const option = document.createElement("option");
    option.value = qg;
    option.textContent = qg;
    selectQuocGia.appendChild(option);
  });

  const soNgayList = getUniqueList("S·ªë ng√†y", true);
  soNgayList.forEach(ngay => {
    const option = document.createElement("option");
    option.value = ngay;
    option.textContent = ngay;
    selectSoNgay.appendChild(option);
  });

  const dungLuongList = getUniqueList("Dung l∆∞·ª£ng", false, true);
  dungLuongList.forEach(dl => {
    const option = document.createElement("option");
    option.value = dl;
    option.textContent = dl + " GB";
    selectDungLuong.appendChild(option);
  });
}

// H√†m t·∫°o HTML b·∫£ng (ch·ªâ tr·∫£ v·ªÅ chu·ªói)
function taoTableHTML(ds) {
  if (ds.length === 0) {
    return "<p>üîé Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.</p>";
  }

  let tableHTML = `<table border="1" cellspacing="0" cellpadding="4" style="border-collapse: collapse; width: 100%; max-width: 100%; overflow-x:auto;">`;
  tableHTML += `<thead><tr>`;

  tableHTML += `<th><input type="checkbox" id="selectAll" /></th>`;
  tableHTML += `<th>STT</th>`;

  for(let i = 2; i < columns.length; i++) {
    tableHTML += `<th>
      ${columns[i].label} 
      <input type="checkbox" class="colToggle" data-col-index="${i}" style="margin-left:5px; vertical-align: middle;" checked />
    </th>`;
  }

  tableHTML += `</tr></thead><tbody>`;

  ds.forEach((sp, index) => {
    tableHTML += `<tr>
      <td><input type="checkbox" class="rowCheckbox" data-index="${index}"></td>
      <td>${index + 1}</td>`;

    for(let i = 2; i < columns.length; i++) {
      const key = columns[i].key;
      tableHTML += `<td>${sp[key] || ""}</td>`;
    }

    tableHTML += `</tr>`;
  });

  tableHTML += `</tbody></table>`;

  return tableHTML;
}

// Hi·ªÉn th·ªã b·∫£ng k√®m n√∫t copy v√† g√°n event
function hienThiBang(ds) {
  if (ds.length === 0) {
    ketquaDiv.innerHTML = "<p>üîé Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.</p>";
    copyBtnContainer.innerHTML = "";
    return;
  }

  copyBtnContainer.innerHTML = `<button id="copySelectedBtn" style="margin-bottom:10px;">Copy d√≤ng v√† c·ªôt ƒë√£ ch·ªçn</button>`;

  // T·∫°o b·∫£ng
  const tableHTML = taoTableHTML(ds);

  // T·∫°o danh s√°ch card cho mobile
  let listViewHTML = `<div class="list-view">`;
  ds.forEach((sp, index) => {
    listViewHTML += `<div class="card" data-index="${index}">
      <div><input type="checkbox" class="rowCheckbox" data-index="${index}" /> <strong>STT: ${index + 1}</strong></div>`;
    for (let i = 2; i < columns.length; i++) {
      const key = columns[i].key;
      const label = columns[i].label;
      const value = sp[key] || "";
      listViewHTML += `<div><strong>${label}:</strong> ${value}</div>`;
    }
    listViewHTML += `</div>`;
  });
  listViewHTML += `</div>`;

  ketquaDiv.innerHTML = tableHTML + listViewHTML;

  // S·ª± ki·ªán ch·ªçn t·∫•t c·∫£ d√≤ng (checkbox trong b·∫£ng)
  document.getElementById("selectAll").addEventListener("change", function () {
    const checked = this.checked;
    document.querySelectorAll(".rowCheckbox").forEach(cb => cb.checked = checked);
  });

  // S·ª± ki·ªán n√∫t copy
  document.getElementById("copySelectedBtn").addEventListener("click", () => {
    copySelectedCells(ds);
  });
}

// H√†m copy d·ªØ li·ªáu theo d√≤ng v√† c·ªôt ch·ªçn
function copySelectedCells(ds) {
  const checkedRows = Array.from(document.querySelectorAll(".rowCheckbox:checked"))
    .map(cb => parseInt(cb.getAttribute("data-index")));

  if (checkedRows.length === 0) {
    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d√≤ng ƒë·ªÉ sao ch√©p.");
    return;
  }

  const checkedCols = Array.from(document.querySelectorAll(".colToggle:checked"))
    .map(cb => parseInt(cb.getAttribute("data-col-index")));

  if (checkedCols.length === 0) {
    alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt c·ªôt ƒë·ªÉ sao ch√©p.");
    return;
  }

  const copiedRecords = checkedRows.map(rowIndex => {
    const sp = ds[rowIndex];

    const lines = checkedCols.map(colIndex => {
      const label = columns[colIndex].label;
      const key = columns[colIndex].key;
      const value = sp[key] || "";
      return `- ${label}: ${value}`;
    });

    return lines.join("\n");
  });

  const copiedText = copiedRecords.join("\n------------------------\n");

  navigator.clipboard.writeText(copiedText)
    .then(() => alert("‚úÖ ƒê√£ sao ch√©p d·ªØ li·ªáu ƒë√£ ch·ªçn v√†o b·ªô nh·ªõ t·∫°m."))
    .catch(err => alert("‚ùå L·ªói khi sao ch√©p d·ªØ li·ªáu: " + err));
}

// H√†m t√¨m ki·∫øm s·∫£n ph·∫©m theo filter v√† t·ª´ kh√≥a
function timKiemSanPham() {
  const keyword = document.getElementById("keyword").value.toLowerCase().trim();
  const filterQG = selectQuocGia.value;
  const filterNgay = selectSoNgay.value;
  const filterDL = selectDungLuong.value;

  let ketQua = data;

  // L·ªçc theo t·ª´ kh√≥a
  if (keyword) {
    ketQua = ketQua.filter(sp =>
      Object.values(sp).some(value =>
        String(value).toLowerCase().includes(keyword)
      )
    );
  }

  // L·ªçc theo Qu·ªëc gia
  if (filterQG) {
    ketQua = ketQua.filter(sp => {
      const qg = sp["Qu·ªëc gia"] || "";
      return qg.trim() === filterQG;
    });
  }

  // L·ªçc theo S·ªë ng√†y
  if (filterNgay) {
    ketQua = ketQua.filter(sp => {
      const soNgay = sp["S·ªë ng√†y"] || "";
      return soNgay.trim() === filterNgay;
    });
  }

  // L·ªçc theo Dung l∆∞·ª£ng
  if (filterDL) {
    ketQua = ketQua.filter(sp => {
      const dlStr = sp["Dung l∆∞·ª£ng"] || "";
      const match = dlStr.match(/(\d+)\s*GB/i);
      return match && match[1] === filterDL;
    });
  }

  hienThiBang(ketQua);
}

// Load d·ªØ li·ªáu t·ª´ file JSON v√† chu·∫©n h√≥a
fetch('data_sanpham.json')
  .then(res => res.json())
  .then(json => {
    // Chu·∫©n h√≥a key "Qu·ªëc gia/\nKhu v·ª±c" th√†nh "Qu·ªëc gia"
    data = json.map(item => {
      if (item["Qu·ªëc gia/\nKhu v·ª±c"]) {
        item["Qu·ªëc gia"] = item["Qu·ªëc gia/\nKhu v·ª±c"];
        delete item["Qu·ªëc gia/\nKhu v·ª±c"];
      }
      return item;
    });
    populateFilterOptions();

    // T·ª± ƒë·ªông g·ªçi timKiemSanPham khi ch·ªçn gi√° tr·ªã trong combobox
    selectQuocGia.addEventListener("change", timKiemSanPham);
    selectSoNgay.addEventListener("change", timKiemSanPham);
    selectDungLuong.addEventListener("change", timKiemSanPham);

    // N·∫øu b·∫°n c√≥ √¥ nh·∫≠p t·ª´ kh√≥a (input#keyword), b·∫°n c√≥ th·ªÉ g·ªçi timKiemSanPham khi nh·∫≠p:
    const inputKeyword = document.getElementById("keyword");
    if (inputKeyword) {
      inputKeyword.addEventListener("input", timKiemSanPham);
    }

    hienThiBang(data);
  })
  .catch(err => {
    ketquaDiv.textContent = "‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu.";
    console.error(err);
  });
